//非递归分别实现求第n个斐波那契数

//0、1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(0)=0，F(1)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 3，n ∈ N*）

//只会固定大小的数组，不会动态数组

#include <stdio.h>

int main()

{

    int i,n;

    int arr[10000]={0};

    printf("实现求第n个斐波那契数:>");

    scanf("%d",&n);


    arr[0]=0;

    arr[1]=1;

    for(i=2;i<10000;i++)

    {

        arr[i]=arr[i-1]+arr[i-2];

    }

    

    printf("第%d个斐波那契数是%d",n,arr[n-1]);

    return 0;

}

// 用户输入一个数， 我要用这个数当数组的长度

// C语言不支持动态数组，也就是说，数组在定义时就要指定长度，把输入数作为它的长度那就说明定义时没有指定长度，这是不合法的。


//使用 指针+动态分配malloc

    // int* p;

    // int n;

    // scanf("%d", &n);

    // p = (int*)malloc(sizeof(int) * n);
